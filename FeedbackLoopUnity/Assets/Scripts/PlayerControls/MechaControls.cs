//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerControls/MechaControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MechaControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MechaControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MechaControls"",
    ""maps"": [
        {
            ""name"": ""MechaActions"",
            ""id"": ""59d5ad42-aeca-48f0-b12e-709ff43d0b0a"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""16f471c6-f925-4751-8665-5505cbb42424"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch control"",
                    ""type"": ""Button"",
                    ""id"": ""0dc4ebe5-13a5-4399-9deb-ddf34e1ee415"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1.5)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash/jump"",
                    ""type"": ""Button"",
                    ""id"": ""8371f443-bb61-4682-abf7-262d121bb6cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeOff"",
                    ""type"": ""Button"",
                    ""id"": ""a91e4a4f-5825-4d57-aa22-d791ec0dfa7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""1b36b483-cb5b-47fa-84de-a91ed79ac4ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot main"",
                    ""type"": ""Button"",
                    ""id"": ""fdbf2fbd-48c8-4a1a-b3cf-3b5ab020ba4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot special"",
                    ""type"": ""Button"",
                    ""id"": ""b7e2a4ab-0fe8-4147-8b3b-78fb5502af0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Forward/Backward/Left/Right"",
                    ""id"": ""a605a263-76f6-4952-b7f5-2a51a6c7444a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e0165083-accd-4cd5-85d3-78e36f675810"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a6d4373f-bff7-4f11-bcf3-bedd6d0c74b2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e8cf3e96-8193-4511-9b99-0d2cb2b21b3a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""419f9ea7-c8b2-4bd0-a757-94c56187c8e9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Up/Down"",
                    ""id"": ""c310b791-6c25-45eb-9689-dd6f0ec64a8b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch control"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e6550527-8451-44ee-be5b-50731644bb70"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Pitch control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fbee48d1-b330-44c4-abb4-f8683011e5b7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Pitch control"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9ebca49b-9f36-4c7b-9bb5-07ce6746760f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Dash/jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49e8245d-686f-422c-8880-6097635840dc"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""132d3ad1-eb00-4468-a939-9b013c3f46c9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Shoot main"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc8e6153-f69b-4003-99b7-c10b81ba03db"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""Shoot special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18d04bd5-6ea9-4609-8184-bb81ddb16b39"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""General control scheme"",
                    ""action"": ""TakeOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""General control scheme"",
            ""bindingGroup"": ""General control scheme"",
            ""devices"": []
        }
    ]
}");
        // MechaActions
        m_MechaActions = asset.FindActionMap("MechaActions", throwIfNotFound: true);
        m_MechaActions_Movement = m_MechaActions.FindAction("Movement", throwIfNotFound: true);
        m_MechaActions_Pitchcontrol = m_MechaActions.FindAction("Pitch control", throwIfNotFound: true);
        m_MechaActions_Dashjump = m_MechaActions.FindAction("Dash/jump", throwIfNotFound: true);
        m_MechaActions_TakeOff = m_MechaActions.FindAction("TakeOff", throwIfNotFound: true);
        m_MechaActions_Aim = m_MechaActions.FindAction("Aim", throwIfNotFound: true);
        m_MechaActions_Shootmain = m_MechaActions.FindAction("Shoot main", throwIfNotFound: true);
        m_MechaActions_Shootspecial = m_MechaActions.FindAction("Shoot special", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MechaActions
    private readonly InputActionMap m_MechaActions;
    private IMechaActionsActions m_MechaActionsActionsCallbackInterface;
    private readonly InputAction m_MechaActions_Movement;
    private readonly InputAction m_MechaActions_Pitchcontrol;
    private readonly InputAction m_MechaActions_Dashjump;
    private readonly InputAction m_MechaActions_TakeOff;
    private readonly InputAction m_MechaActions_Aim;
    private readonly InputAction m_MechaActions_Shootmain;
    private readonly InputAction m_MechaActions_Shootspecial;
    public struct MechaActionsActions
    {
        private @MechaControls m_Wrapper;
        public MechaActionsActions(@MechaControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_MechaActions_Movement;
        public InputAction @Pitchcontrol => m_Wrapper.m_MechaActions_Pitchcontrol;
        public InputAction @Dashjump => m_Wrapper.m_MechaActions_Dashjump;
        public InputAction @TakeOff => m_Wrapper.m_MechaActions_TakeOff;
        public InputAction @Aim => m_Wrapper.m_MechaActions_Aim;
        public InputAction @Shootmain => m_Wrapper.m_MechaActions_Shootmain;
        public InputAction @Shootspecial => m_Wrapper.m_MechaActions_Shootspecial;
        public InputActionMap Get() { return m_Wrapper.m_MechaActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MechaActionsActions set) { return set.Get(); }
        public void SetCallbacks(IMechaActionsActions instance)
        {
            if (m_Wrapper.m_MechaActionsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnMovement;
                @Pitchcontrol.started -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnPitchcontrol;
                @Pitchcontrol.performed -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnPitchcontrol;
                @Pitchcontrol.canceled -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnPitchcontrol;
                @Dashjump.started -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnDashjump;
                @Dashjump.performed -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnDashjump;
                @Dashjump.canceled -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnDashjump;
                @TakeOff.started -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnTakeOff;
                @TakeOff.performed -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnTakeOff;
                @TakeOff.canceled -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnTakeOff;
                @Aim.started -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnAim;
                @Shootmain.started -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnShootmain;
                @Shootmain.performed -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnShootmain;
                @Shootmain.canceled -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnShootmain;
                @Shootspecial.started -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnShootspecial;
                @Shootspecial.performed -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnShootspecial;
                @Shootspecial.canceled -= m_Wrapper.m_MechaActionsActionsCallbackInterface.OnShootspecial;
            }
            m_Wrapper.m_MechaActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Pitchcontrol.started += instance.OnPitchcontrol;
                @Pitchcontrol.performed += instance.OnPitchcontrol;
                @Pitchcontrol.canceled += instance.OnPitchcontrol;
                @Dashjump.started += instance.OnDashjump;
                @Dashjump.performed += instance.OnDashjump;
                @Dashjump.canceled += instance.OnDashjump;
                @TakeOff.started += instance.OnTakeOff;
                @TakeOff.performed += instance.OnTakeOff;
                @TakeOff.canceled += instance.OnTakeOff;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Shootmain.started += instance.OnShootmain;
                @Shootmain.performed += instance.OnShootmain;
                @Shootmain.canceled += instance.OnShootmain;
                @Shootspecial.started += instance.OnShootspecial;
                @Shootspecial.performed += instance.OnShootspecial;
                @Shootspecial.canceled += instance.OnShootspecial;
            }
        }
    }
    public MechaActionsActions @MechaActions => new MechaActionsActions(this);
    private int m_GeneralcontrolschemeSchemeIndex = -1;
    public InputControlScheme GeneralcontrolschemeScheme
    {
        get
        {
            if (m_GeneralcontrolschemeSchemeIndex == -1) m_GeneralcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("General control scheme");
            return asset.controlSchemes[m_GeneralcontrolschemeSchemeIndex];
        }
    }
    public interface IMechaActionsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPitchcontrol(InputAction.CallbackContext context);
        void OnDashjump(InputAction.CallbackContext context);
        void OnTakeOff(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnShootmain(InputAction.CallbackContext context);
        void OnShootspecial(InputAction.CallbackContext context);
    }
}
